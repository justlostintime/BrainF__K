' Gambas class file

Static Public Gambas_Code As Integer = 0
Static Public C_code As Integer = 1
Static Public X86_asm_code As Integer = 2
Static Public Python3_code As Integer = 3

Static Public CodeNames As String[]
Static Public FileExtension As String[]
Static Public ObjExtension As String[]
Static Public Preamble As String[]
Static Public ClosingCode As String[]
Static Public BuildCmd As String[][]

Public CompileType As Integer
Public NewSource As String
Public SourceFIle As String
Public BinaryFile As String
Public CAsmFIle As String

Static Public Sub Myinit()

      Print "Configuring JitCompiler"
      CodeNames = ["Gambas Script", "C Source     ", "X86 Assembler", "Python 3     "]
      FileExtension = [".gbs", ".c", ".asm", "py"]
      ObjExtension = [".gbs", ".cbn", ".run", "pyo"]
      Preamble = ["Read File gambas", "Read File c", "Read Fasm Preamble", "Read Python3 Preamble"]
      ClosingCode = ["Read File gambas", "Read File c", "Read file asm", "Read Python 3 end"]
      BuildCmd = [["chmod 755  &1"], ["gcc -O3 -S -o &3 &1", "gcc  -O3 -o &2 &1"], [" fasm &1  &2", "chmod 755 &2"], ["chmod 755  &1"]]

      Preamble[Gambas_code] = File.Load("gambas_preamble")
      ClosingCode[Gambas_Code] = File.Load("gambas_endcode")
      Preamble[C_code] = File.Load("c_preamble")
      ClosingCode[C_code] = File.Load("c_endcode")
      Preamble[X86_asm_code] = File.Load("fasm_preamble")
      ClosingCode[X86_asm_code] = File.Load("fasm_endcode")
      Preamble[Python3_code] = File.Load("python_preamble")
      ClosingCode[Python3_code] = File.Load("python_endcode")

End

Public Sub _New(mpcode As JitPcodeInst[], genLanguage As Integer)

      Dim sline As String

      SourceFIle = Temp("gcode")
      BinaryFile = Temp("bfbinary")
      CAsmFile = Temp("casm")
      Dim indent As Integer = 0

      NewSource = Preamble[genLanguage]

      For Each p As JitPcodeInst In mpcode
            If indent >= 4 And If p.Instruction = p.pcode_ifNotzero Then indent -= 4
            Dim lines As String[] = Split(p.gencode(genLanguage), "\n", "\"", True, True)
            For Each sline In lines
                  NewSource &= Space(indent) & sline & "\n"
            Next
            If p.Instruction = p.pcode_ifZero Then indent += 4
      Next

      NewSource &= ClosingCode[genLanguage]

      SourceFile = File.setext(SourceFile, FileExtension[genLanguage])
      BinaryFile = File.SetExt(BinaryFile, ObjExtension[genLanguage])

      File.Save(SourceFile, NewSource)

      Dim Makeit As String[] = BuildCmd[genLanguage]
      For Each mitem As String In Makeit
            Dim buildit As String[] = Split(Subst(mitem, SourceFile, BinaryFile, CAsmFIle), " ", "\"", True, True)
            TextInfo.BFOutput.Print("Building " & CodeNames[genLanguage] & "  : " & buildit.Join(" ") & "\n\r")
            If Not System.Exist(buildit[0]) Then
                  Message.Warning("Tools for building " & CodeNames[genLanguage] & " not found (" & buildit[0] & ")")
                  Break
            Endif
            If buildit.count > 0 Then
                  Exec buildit Wait
                  If Process.LastValue <> 0 Then
                        Message.Error("Build failed for :" & Quote(SourceFIle))
                        Break
                  Endif
            Endif
      Next

      CompileType = genLanguage

End

Static Public LastCommand As String = ""

Public Sub Execute(Optional genLanguage As Integer = CompileType)

      If genLanguage = Gambas_Code Or If genlanguage = Python3_code Then
            Try TextInfo.BFOutput.Exec([SourceFile])
            If Error Then
                  Message.Warning("There Seems to be an Issue running Script: " & SourceFile & " : " & Error.text)
            Endif
      Else
            Try TextInfo.BFOutput.Exec([BinaryFile])
            If Error Then
                  Message.Warning("There Seems to be an Issue running Binary : " & BinaryFile & " : " & Error.text)
            Endif
      Endif

End
