' Gambas class file

Public Enum pcode_inc = 2, pcode_dec = 3, pcode_left = 0, pcode_right = 1, pcode_ifzero = 4, pcode_ifNotZero = 5, pcode_input = 6, pcode_output = 7

Public ptext As String[] = ["Left  < ", "Right > ", "Inc   + ", "Dec   - ", "BZ    [ ", "BNZ   ] ", "Output .", "Input  ,"]

Public Languages As String[][] = [
      ["DP -= &1\n", "DP += &1\n", "Storage[DP] += cbyte(&1)\n", "Storage[DP] -= cbyte(&1)\n", "while  Storage[dp] >  0\n",
      "wend\n", "for i = 1 to &1\nputchar(storage[dp])\nnext\n", "Storage[dp]=readchar()\n"],
      ["dp -= &1;\n", "dp += &1;\n", "storage[dp] += &1;\n", "storage[dp] -= &1;\n", "while (storage[dp] > 0) {\n",
      "}\n", "for (i=0;  i <  &1; i++) putchar((int)storage[dp]);\n", "storage[dp] = (unsigned char)getchar();\n"],
      ["    sub rdi,&1\n", "    add rdi,&1\n", "    add byte [rdi],&1\n", "    sub byte [rdi],&1\n",
      "    cmp byte [rdi],0\n    jz lab&1\nlab&2:\n", "    cmp byte [rdi],0\n    jnz lab&1\nlab&2:\n", "    mov ax,&1\n    call putchars\n", "    nop\n"]

]
Public LanguagesSingle As String[][] = [
      ["dec  DP\n", "inc DP\n", "inc Storage[DP]\n", "Dec Storage[DP] \n", "while Storage[dp] > 0\n",
      "wend\n", "putchar(storage[dp])\n", "Storage[dp]=readchar()\n"],
      ["dp--;\n", "dp++;\n", "storage[dp]++;\n", "storage[dp]--;\n", "while (storage[dp] >  0) {\n",
      "}\n", "putchar((int)storage[dp]);\n", "storage[dp] = (unsigned char)getchar();\n"],
      ["    dec rdi\n", "    inc rdi\n", "    inc byte [rdi]\n", "    dec byte [rdi]\n",
      "    cmp byte [rdi],0\n    jz lab&1\nlab&2:\n", "    cmp byte [rdi],0\n    jnz lab&1\nlab&2:\n", "    call putchar\n", "    nop\n"]
]

Public Instruction As Byte
Public Operand As Pointer
Public JumpDest As Integer

Public Sub _new(opcode As Byte, oper As Pointer, Optional Retpos As Integer = 0)

      Instruction = opcode
      Operand = oper
      JumpDest = RetPos

End

Public Sub _print() As String

      Dim report As String = ""

      report = Subst("&1                  &2", ptext[Instruction], Format(CLong(Operand), "######0"))
      Return report

End

Public Sub gencode(Optional genLanguage As Integer = 0) As String

      If Operand = 1 Then
            Return Subst(LanguagesSingle[genLanguage][Instruction], CInt(Operand), JumpDest)
      Else
            Return Subst(Languages[genLanguage][Instruction], CInt(Operand), JumpDest)
      Endif

End
