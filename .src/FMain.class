' Gambas class file

Property MyCpu As Cpu Use $cpu
Property Read CurrentFile As String Use $CurrentFile = ""
Property DisplayColumnsWidth As Integer Use $DisplayColumnWidth = 20
Private HighlightColor As Integer = Color.LightBackground

Property CompileLanguage As Integer Use $CompileLanguage = 0

Private OldSelectedRow As Integer = 0
Private OldSelectedCol As Integer = 0
Private OldBG As Integer = 0

Public mytimer As New Timer As "thetimer"
Public ticks As Long = 0
Public FormCLosing As Boolean = False

SourceCodeUpdated As Boolean = False

Public Sub thetimer_Timer()

      Inc ticks
      If $cpu Then
            TextPC.text = $cpu.PC
            TextPC.Refresh()
            TextCell.text = $cpu.cell
            TextCell.Refresh()
            TotalInstructions.text = $cpu.InstCnt
            TotalInstructions.Refresh()
      Endif

End

Property Title As String Use $title = "Brian Fuck Interpreter/Compiler  Gambas/C/x64asm"

Public Sub Form_Open()

      System.IgnoreOverflow = True
      Spinner1.Hide()
      Me.MinH = 350
      Me.minw = 900

      read_Settings()
      MemoryDisplay.Show()
      TextInfo.Show()
      mytimer.Delay = 0.1
      mytimer.Start()

      CompiledInst.Columns.count = 5
      CompiledInst.Columns.width = $DisplayColumnWidth
      CompiledInst.Rows.Count = 8
      OldBG = CompiledInst[0, 0].Background

      JumpTable.Columns.count = 2
      JumpTable.Columns.width = JumpTable.w \ 2
      JumpTable.Rows.count = 10

      FMain.text = $title
      JitCompiler.Myinit()

End

Public Sub Form_Close()

      formClosing = True
      mytimer.Stop()
      If $cpu Then
            $cpu.Reset = True
            $Cpu.Trace = False
            $cpu.cpuTimer.Stop()
            Wait 1.0
            $cpu = Null
      Endif

      MemoryDisplay.Close()
      TextInfo.Close()
      write_settings()
      If SourceCodeUpdated Then
            SaveBF_Click()
      Endif

End

Public Sub read_Settings()

      Me.top = Settings["window/top", Me.Top]
      Me.Left = Settings["Window/Left", Me.Left]
      Me.Height = Settings["Window/Height", Me.Height]
      Me.Width = Settings["Window/Width", Me.Width]

End

Public Sub write_settings()

      Settings["Window/Top"] = Me.Top
      Settings["Window/Left"] = Me.Left
      Settings["Window/Height"] = Me.Height
      Settings["Window/Width"] = Me.Width

End

Public Sub SaveBF_Click()

      If $CurrentFile = "" Then
            SaveAsBF_Click()
            Return
      Endif
      SourceCode.Save($CurrentFile)

Catch
      Message("Error Saving file " & $CurrentFile & " : " & Error.Text)

End

Public Sub LoadProgram_Click()

      If $Cpu And If $Cpu.running Then
            Message.Error("You must wait for running program to end\nor Break/Reset the program before\n Loading a new program")
            Return
      Endif
      Dialog.Filter = ["*.bf", "Brain F__K Files"]
      If Dialog.OpenFile() Then Return
      SourceCode.Load(Dialog.Path)
      $CurrentFile = Dialog.Path
      InfoTab[0].Text = File.BaseName(Dialog.path)

Catch
      Message("Error loading  file " & Dialog.Path & " : " & Error.text)

End

Public Sub SaveAsBF_Click()

      Dialog.Filter = ["*.bf", "Brain F__K Files"]
      If Dialog.SaveFile() Then Return
      SourceCode.Save(Dialog.path)
      $CurrentFile = Dialog.Path

Catch
      Message("Error Saving file " & Dialog.Path & " : " & Error.text)

End

Public Sub NewBF_Click()

      If $Cpu And If $Cpu.running Then
            Message.Error("You must wait for running program to end\nor Break/Reset the program before\n Starting a new program")
            Return
      Endif

      SourceCode.Clear()
      $CurrentFile = ""

      If $cpu Then
            $cpu.cpuTimer.Stop()
            $cpu = Null
      Endif

      InfoTab[0].text = "New"
      If $cpu And If $cpu.Jit_gambas_Binary Then $cpu.Jit_gambas_Binary.NewSource = ""
      If $cpu And If $cpu.Jit_c_Binary Then $cpu.Jit_C_Binary.NewSource = ""
      If $cpu And If $cpu.Jit_asm_Binary Then $cpu.Jit_Asm_Binary.NewSource = ""
      JitPcodeOut.Clear()
      GambasListing.Clear()
      CListing.Clear()
      AsmListing.Clear()
      CompiledInst.Clear()
      JumpTable.Clear()

End

Public Sub QuitBF_Click()

      Me.Close()

End

Public Sub SetProgramDisplay()

      If Not $Cpu Or If Not $Cpu.Compiled Then Return

      Dim cols As Integer = CompiledInst.Columns.count

      CompiledInst.Rows.Count = ($cpu.Program.count + cols) \ cols

      Return

      For i As Integer = 0 To $Cpu.Program.Max
            If i % 500 = 0 Then Wait 0
            Dim row As Integer = i \ cols
            Dim Col As Integer = i % cols
            CompiledInst[row, col].text = $cpu.operators[$cpu.Program[i]]
      Next

End

Public Sub SetJumpDisplay()

      Dim i As Integer

      JumpTable.Columns[0].text = "["
      JumpTable.Columns[1].text = "]"
      JumpTable.Rows.count = $cpu.SysJumpStack.count
      For i = 0 To $Cpu.SysJumpStack.Max
            JumpTable[i, 0].Text = $cpu.SysJumpStack[i]
            JumpTable[i, 1].Text = $cpu.SysReturnStack[i]
      Next

End

Public Sub CompileMenu_Click()

      If $Cpu And If $Cpu.running Then
            Message.Error("The Program is currently runing you must stop/break, it before compiling/executing  a new program")
            Return
      Endif
      Spinner1.Show()
      Spinner1.Start()
      $Cpu = New CPU(SourceCode.text, TextInfo.BFOutput) As "cputrace"
      If $cpu.Compiled Then
            SetJumpDisplay()
            SetProgramDisplay()
            setActiveEntry()
            InfoTab.Index = 1
            JitPcodeOut.text = JitPcode._Print($cpu.Jit_Pcode)
            GambasListing.text = $cpu.Jit_gambas_Binary.NewSource
            CListing.text = $cpu.Jit_C_Binary.NewSource
            AsmListing.text = $cpu.Jit_Asm_Binary.NewSource
      Endif
      Spinner1.Stop()
      Spinner1.Hide()

End

Public Sub cputrace_traceinfo()

      setActiveEntry()

End

Public Sub StepBF_Click()

      If $cpu And If $cpu.Compiled Then
            $cpu.SingleStep = True
            If Not $cpu.running Then
                  RunningMsg.text = "Running"
                  $cpu()
                  setActiveEntry()
            Endif
      Endif

End

Public Sub ResetMenu_Click()

      If $cpu And If $cpu.compiled Then
            If $cpu.running Then
                  $cpu.Reset = True
            Else
                  $Cpu.ResetMachine()
                  setActiveEntry()
            Endif
      Endif

End

Public Sub setActiveEntry()

      If FormClosing Then Return

      Dim Cols As Integer = CompiledInst.Columns.count
      Dim row As Integer = $cpu.pc \ cols
      Dim col As Integer = $cpu.pc % cols

      CompiledInst[OldSelectedRow, OldSelectedCol].Background = OldBG
      oldBG = CompiledInst[Row, col].Background
      CompiledInst[Row, col].Background = HighlightColor
      If $cpu.program And If $cpu.Program.count > $cpu.pc Then
            CompiledInst[Row, col].text = $cpu.operators[$cpu.Program[$cpu.PC]]
      Endif
      CompiledInst.Refresh()
      OldSelectedCol = col
      OldSelectedRow = row
      TextPC.text = $cpu.PC
      TextPC.Refresh()
      TextCell.text = $cpu.cell
      TextCell.Refresh()
      TotalInstructions.text = $cpu.InstCnt
      TotalInstructions.Refresh()
      If $Cpu.running Then
            RunningMsg.text = "Running"
      Else
            RunningMsg.text = "Halted"
      Endif
      MemoryDisplay.Write_data()
      Wait 0

End

Public Sub StopMenu_Click()

      If $cpu And If $cpu.compiled Then
            $cpu.Break = True
      Endif

End

Public Sub RunBF_Click()

      If $cpu And If $cpu.Compiled And If $Cpu.Running = False Then
            RunningMsg.text = "Running"
            $cpu()
            setActiveEntry()
      Endif

End

Public Sub StopButton_Click()

      StopMenu_Click()

End

Public Sub StepButton_Click()

      StepBF_Click()

End

Public Sub RunButton_Click()

      RunBF_Click()

End

Public Sub ResetButton_Click()

      ResetMenu_Click()

End

Public Sub CompileTool_Click()

      CompileMenu_Click()

End

Public Sub SingleStepTool_Click()

      StepBF_Click()

End

Public Sub StopTool_Click()

      StopMenu_Click

End

Public Sub ToolButton4_Click()

      RunBF_Click()

End

Public Sub ResetTool_Click()

      ResetMenu_Click()

End

Public Sub loadExample(sourceName As String)

      If $Cpu And If $Cpu.running Then
            Message.Error("You must wait for running program to end\nor Break/Reset the program before\n loading an example")
            Return
      Endif

      NewBF_Click()
      SourceCode.text = File.Load(sourceName)
      InfoTab[0].text = File.BaseName(sourceName)

End

Public Sub bottlesMenu_Click()

      loadExample("99bottles.bf")

End

Public Sub bsortex_Click()

      LoadExample("bsort.bf")

End

Public Sub fibex_Click()

      LoadExample("fib.bf")

End

Public Sub hanoiex_Click()

      LoadExample("hanoi.bf")

End

Public Sub helloex_Click()

      LoadExample("hello_world.bf")

End

Public Sub lostkingdomex_Click()

      LoadExample("LostKingdom.bf")

End

Public Sub Mandelbrotex_Click()

      LoadExample("mandelbrot.bf")

End

Public Sub qsortex_Click()

      LoadExample("qsort.bf")

End

Public Sub sierpinskiex_Click()

      LoadExample("sierpinski.bf")

End

Public Sub TraceRadio_Click()

      If $cpu Then
            $cpu.trace = True
      Else
            traceoffRadio.Value = True
      Endif

End

Public Sub traceoffRadio_Click()

      If $cpu Then
            $cpu.trace = False
      Endif

End

Public Sub Form_Resize()

      InfoTab.w = Me.w - 8
      InfoTab.h = (Me.h - 30) - InfoTab.top

      SourceCode.h = InfoTab.H - 35
      SourceCode.w = infotab.w - 10

      JitPcodeOut.h = InfoTab.H - 35
      JitPcodeOut.w = InfoTab.w - 10

      GambasListing.h = InfoTab.H - 35 - gambaspanel.h
      GambasListing.w = InfoTab.w - 10
      CListing.h = InfoTab.H - 35 - cpanel.h
      CListing.w = InfoTab.w - 10
      AsmListing.h = InfoTab.H - 35 - asmpanel.h
      AsmListing.w = InfoTab.w - 10

      Buttons.top = InfoTab.h - Buttons.h - 50
      RegInfo.left = InfoTab.w - RegInfo.w - 4
      RegInfo.top = Buttons.top

      JumpTable.left = InfoTab.w - JumpTable.w - 4
      JumpTable.Height = (RegInfo.top - JumpTable.top - 4)

      CompiledInst.h = (Buttons.top - CompiledInst.Top - 4)
      CompiledInst.w = (JumpTable.left - CompiledInst.left - 4)

      CompiledInst.Clear()
      CompiledInst.Columns.count = (CompiledInst.w \ $DisplayColumnWidth) - 1
      CompiledInst.Columns.width = $DisplayColumnWidth
      Wait 0
      SetProgramDisplay()

End

Public Sub CompiledInst_Data(Row As Integer, Column As Integer)

      If Not $Cpu Or If Not $Cpu.Compiled Then Return
      Dim element As Integer = 0

      element = (row * CompiledInst.Columns.count) + column
      If element > $cpu.Program.max Then Return
      CompiledInst.Data.text = $cpu.operators[$cpu.Program[element]]

End

Public Sub calpiex_Click()

      LoadExample("CalcPi.bf")

End

Public Sub dbf2cex_Click()

      LoadExample("dbf2c.bf")

End

Public Sub Calcex_Click()

      LoadExample("Calculator.bf")

End

Public Sub runGambas_Click()

      If $cpu And If $cpu.Jit_gambas_Binary And If $cpu.Jit_Gambas_Binary.NewSource <> "" Then
            $cpu.Jit_Gambas_Binary.Execute()
      Endif

End

Public Sub runCBin_Click()

      If $cpu And If $cpu.Jit_C_Binary And If $cpu.Jit_C_Binary.NewSource <> "" Then
            $cpu.Jit_C_Binary.Execute()
      Endif

End

Public Sub runAsmBin_Click()

      If $cpu And If $cpu.Jit_asm_Binary And If $cpu.Jit_ASM_Binary.NewSource <> "" Then
            $cpu.Jit_asm_Binary.Execute()
      Endif

End
