' Gambas module file

Public CompileType As Integer = 0

'' Used to indicate which binary type source code is created in
Public Enum Gambas_Code = 0, C_code = 1, X86_asm_code = 2
Public CodeNames As String[] = ["Gambas Script", "C Source", "X86 Assembler"]

Public NewSource As String = ""

Public BinaryFile As String = Temp("bfbinary")
Public FileExtension As String[] = [".gbs", ".c", ".asm"]
Public SourceFIle As String = Temp("gcode")

Public Preamble As String[] = ["Read File gambas", "Read File c", "main: ; Fasm Preamble\n"]

Public ClosingCode As String[] = ["Read File gambas", "Read File c", ""]

Public ExecuteCmd As String[][] = [[SourceFile], [BinaryFile], [BinaryFile]]

Public BuildCmd As String[] = ["chmod 755  &1", "gcc  -o &2 &1", " fasm &1  &2"]

Public Sub _init()

      Preamble[Gambas_code] = File.Load("gambas_preamble")
      ClosingCode[Gambas_code] = File.Load("gambas_endcode")
      Preamble[c_code] = File.Load("c_preamble")
      ClosingCode[c_code] = File.Load("c_endcode")

End

Public Sub _call(pcode As JitPcodeInst[], genLanguage As Integer) As String

      NewSource = Preamble[genLanguage]

      For Each p As JitPcodeInst In pcode
            NewSource &= p.gencode(genLanguage)
      Next

      NewSource &= ClosingCode[genLanguage]
      SourceFile = File.setext(SourceFile, FileExtension[genLanguage])
      File.Save(SourceFile, NewSource)

      Dim buildit As String[] = Split(Subst(BuildCmd[genLanguage], SourceFile, BinaryFile), " ", "\"", True, True)

      If buildit.count > 0 Then
            Exec buildit Wait
      Endif

      CompileType = genLanguage

      Return NewSource

End

Public Sub Execute(Optional genLanguage As Integer = CompileType)

      If genLanguage = gambas_code Then
            TextInfo.BFOutput.Exec([SourceFile])
      Else
            TextInfo.BFOutput.Exec([BinaryFile])
      Endif

End
