#[allow(dead_code)]
#[allow(unused_assignments)]
#[allow(unused_imports)]

extern crate libc;
use libc::{putchar,getchar};
use termion::raw::IntoRawMode;
use std::io::{stdout};
use std::num::Wrapping;

#[allow(dead_code)]
fn readchar() -> Wrapping<u8> {
  let ch = unsafe { getchar() };
  if  ch == 10 {
    return Wrapping(0);
  } else {
    unsafe { putchar(ch)};
  }
  return Wrapping(ch as u8);
}

#[allow(dead_code)]
fn writechar(ch: Wrapping<u8>, count : u8) {
  let mut cnt = count;
  while cnt > 0 {
    cnt -= 1;
    unsafe { putchar(ch.0 as i32)};
    if ch.0 == 13 { unsafe { putchar(10)}; }
    if ch.0 == 10 { unsafe { putchar(13)}; }
  }
}

fn main() {
    // Statements here are executed when the compiled binary is called.
    let mut storage = vec![Wrapping(0u8); 10000000].into_boxed_slice();  // define a meg of cells
    #[allow(unused_mut)]
    let mut dp = 0;                                                // define the index into the cell array
    // Print text to the console.
    println!("Begin Binary execution RUST code source");
    let _stdout = stdout().into_raw_mode();

//*****************************************************************************
