
extern crate libc;
use libc::{putchar,getchar};
use termion::raw::IntoRawMode;
use std::io::{stdout};

#[allow(dead_code)]
#[allow(unused_assignments)]

fn readchar() -> u8 {
  let ch = unsafe { getchar() };
  if  ch == 10 {
    return 0 as u8;
  } else {
    unsafe { putchar(ch)};
  }
  return ch as u8;
}

fn writechar(ch: u8, count : u8) {
  let mut cnt = count;
  while cnt > 0 {
    cnt -= 1;
    unsafe { putchar(ch as i32)};
    if ch == 13 { unsafe { putchar(10)}; }
    if ch == 10 { unsafe { putchar(13)}; }
  }
}

fn main() {
    // Statements here are executed when the compiled binary is called.
    let mut storage = vec![0u8; 10000000].into_boxed_slice();  // define a meg of cells
    let mut dp = 0;                                                // define the index into the cell array
    // Print text to the console.
    println!("Begin Binary execution RUST code source");
    let _stdout = stdout().into_raw_mode();
    
//*****************************************************************************

